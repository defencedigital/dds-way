{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The DDS Way The DDS Way documents the specific technology, tools and processes that Defence Digital Service teams use to build and operate services. It\u2019s not intended as guidance for anyone working outside DDS. This is based on the GDS Way About The DDS Way The DDS Way shares agreed ways of working so service teams benefit from: using similar tools central procurement costs savings as new teams will be cheaper to spin up The DDS Way makes it easier for projects to get started while still giving teams flexibility to do something different if their project needs it. The DDS Way includes consistent: terminology ways of working technology and tools measures All decisions are made in alignment with Service Manual which covers service design more broadly. Products at DDS in discovery or alpha development phases must follow agile delivery principles and also have the option to follow the standards in this repository. Products in beta and live phases must follow both the instructions set out in the Service Manual and the standards in this repository. How to add new guidance Contribute to this repository by making a pull request in GitHub for discussion at the DDS Way Forum. You can also read the service manual to find out about learning about and writing user needs . Thank you for your contributions as we develop this repository. The DDS Way Forum This site documents some of the decisions agreed at the DDS Way Forum about the products we operate. The DDS Forum meets once a month. The Forum is lead developers and technical architects representing DDS projects who are responsible for communicating and implementing the DDS Way. The Forum reviews: all DDS Way open and closed PRs expired guidance and if it should be continued possible subject areas and ownership of new content Contact The DDS Way Forum Contact the DDS Way Forum using the #dds-way Slack channel or by email at team@digital.mod.uk .","title":"The DDS Way"},{"location":"#the-dds-way","text":"The DDS Way documents the specific technology, tools and processes that Defence Digital Service teams use to build and operate services. It\u2019s not intended as guidance for anyone working outside DDS. This is based on the GDS Way","title":"The DDS Way"},{"location":"#about-the-dds-way","text":"The DDS Way shares agreed ways of working so service teams benefit from: using similar tools central procurement costs savings as new teams will be cheaper to spin up The DDS Way makes it easier for projects to get started while still giving teams flexibility to do something different if their project needs it. The DDS Way includes consistent: terminology ways of working technology and tools measures All decisions are made in alignment with Service Manual which covers service design more broadly. Products at DDS in discovery or alpha development phases must follow agile delivery principles and also have the option to follow the standards in this repository. Products in beta and live phases must follow both the instructions set out in the Service Manual and the standards in this repository.","title":"About The DDS Way"},{"location":"#how-to-add-new-guidance","text":"Contribute to this repository by making a pull request in GitHub for discussion at the DDS Way Forum. You can also read the service manual to find out about learning about and writing user needs . Thank you for your contributions as we develop this repository.","title":"How to add new guidance"},{"location":"#the-dds-way-forum","text":"This site documents some of the decisions agreed at the DDS Way Forum about the products we operate. The DDS Forum meets once a month. The Forum is lead developers and technical architects representing DDS projects who are responsible for communicating and implementing the DDS Way. The Forum reviews: all DDS Way open and closed PRs expired guidance and if it should be continued possible subject areas and ownership of new content","title":"The DDS Way Forum"},{"location":"#contact-the-dds-way-forum","text":"Contact the DDS Way Forum using the #dds-way Slack channel or by email at team@digital.mod.uk .","title":"Contact The DDS Way Forum"},{"location":"hostinginfrastructure/","text":"Hosting and infrastructure","title":"Hosting and infrastructure"},{"location":"hostinginfrastructure/#hosting-and-infrastructure","text":"","title":"Hosting and infrastructure"},{"location":"loggingmonitoringalerting/","text":"Logging, monitoring and alerting","title":"Logging, monitoring and alerting"},{"location":"loggingmonitoringalerting/#logging-monitoring-and-alerting","text":"","title":"Logging, monitoring and alerting"},{"location":"onboarding/","text":"Onboarding","title":"Onboarding"},{"location":"onboarding/#onboarding","text":"","title":"Onboarding"},{"location":"operatingservice/","text":"Operating a service","title":"Operating a service"},{"location":"operatingservice/#operating-a-service","text":"","title":"Operating a service"},{"location":"servicemanualtest/","text":"service manual test Hello. This is my first document.","title":"DDS Service Manual"},{"location":"servicemanualtest/#service-manual-test","text":"Hello. This is my first document.","title":"service manual test"},{"location":"softwaredevelopment/","text":"Software development","title":"Software development"},{"location":"softwaredevelopment/#software-development","text":"","title":"Software development"},{"location":"userresearch/","text":"User Research hello this is my first document","title":"User Research"},{"location":"userresearch/#user-research","text":"hello this is my first document","title":"User Research"},{"location":"versioncontroldeployments/","text":"Version control and deployments At DDS, we follow the principles set out in the Service Manual for managing the code we write by: using version control making source code open Publish open source code Wherever possible, we make our source code open and reusable. This means the rest of Defence, other government departments, and people in outside organisations can benefit from our work. It\u2019s not always appropriate to code in the open. There are sometimes grounds for keeping some data and code closed , for example: keys and credentials algorithms and logic that exposes sensitive military workings code or data that makes clear details of unannounced policy The Service Manual explains how to open previously closed code and your responsibilities for maintaining open code . When you publish open source code, your project must: include a README have useful and informative commit messages about why a change was made provide a changelog include an MIT and OGL licence file link to a public list of known issues and bugs have an email address to submit security related bug reports list a version number compatible with Semantic Versioning Your open source code project should: publish packages to relevant language specific repositories such as PyPI - the Python Package Index post contributors' guidelines in a contributing file, like the Go repository set up any tests to run in a continuous integration environment (we currently use GitHub Actions) You could also provide a mailing list so people can discuss your project. Use GitHub DDS uses GitHub as its code repository. Put new repositories for DDS services in the defencedigital organisation on GitHub. You can use your personal GitHub account to access defencedigital . Ask your tech lead or technical architect to invite you. DDS will revoke your access to defencedigital when you leave DDS. To secure your Github repository, make sure you: configure two-factor authentication for your account (enforced at an organisation level) have considered encrypting your repository contents consider protecting your main branch to prevent changes being committed without a suitable review You can also consider backing up your Git repositories to another location (this should be a team responsibility). If you are using AWS to host your service AWS CodeCommit is one option. Naming repositories Naming conventions for repositories make it easier for people to find relevant ones and to understand how they interrelate. With that in mind: all repositories should have a clear and logical name, so that people can see more or less what it does by simply reading the name where there would otherwise be a space in the name, you should replace this with a hypeh ( - ), not a dot or any other punctuation project-specific repos should have a logical and identifiable prefix prepended to their name. For example, Project R2-D2 has repos like r2-d2-infra and r2-d2-docs repos that aren't project-specific do not need anything prepended to them How to retire applications If an application is no longer used in production, you should archive its repository . Update the application's README to explain why the repository has been archived, and link to a new location if the application has been superseded. Working with Git Commit messages Writing good commit messages is important. Not just for yourself, but for other developers on your project. This includes: new (or recently absent) developers who want to get up to speed on progress interested external parties who want to follow progress of the project people in the public (remember, we code in the open) who want to see our work, or learn from our practices any future developers (including yourself) who want to see why a change was made Capturing context around a change allows people to understand why a particular implementation decision was made, much like an architecture decision record . We're being kinder to our future selves. Recommended blog posts on this topic How to Write a Git Commit Message 5 useful tips for a better commit message Every line of code is always documented Content A good commit message briefly summarises the \"what\" for scanning purposes, but also includes the \"why\". If the \"what\" in the message is not enough, the diff is there as a fallback. This is not true for the \"why\" of a change - this can be much harder or impossible to reconstruct, but is often of great significance. Example Set cache headers prefer: Set cache headers IE 6 was doing foo, so we need to do bar. See http://example.com/why-is-this-broken for more details. Links to issue trackers A link to a ticket in an issue tracker should not be seen as an alternative to writing a commit message. While a link can add some extra context for people reviewing a pull request, the commit message should stand on its own. There's no guarantee that the link will continue to work in the future when someone is looking through the commit history to understand why a change was made. If you are adding a link to a publicly viewable repository, ensure that the linked ticket is publicly viewable (and likely to remain so). Structure Commit messages should start with a one-line summary no longer than 50 characters. Various Git tools (including GitHub) use this as the commit summary, so you should format it like an email subject, with a leading capital and no full stop. The Git convention is to write these in the present tense. For example: Leverage best-of-breed synergies going forward You should leave a blank line before the rest of the commit message, which you should wrap at around 72 characters: this makes it easier to view commit messages in a terminal. Example Taken from Tim Pope\u2019s guidelines . Capitalized, short (50 chars or less) summary More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of an email and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); tools like rebase can get confused if you run the two together. Write your commit message in the present tense: \"Fix bug\" and not \"Fixed bug.\" This convention matches up with commit messages generated by commands like git merge and git revert. Further paragraphs come after blank lines. Bullet points are okay, too Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here Use a hanging indent Branching/merging conventions You may often choose to work on a particular feature on a \"feature branch\" rather than directly on main . Indeed, given how cheap branches are in Git, using branches is positively encouraged. You are encouraged to make liberal use of Git's history rewriting features while working locally, in order to arrange your commits into appropriate logical chunks that will make sense to your fellow developers. In particular, you may find git rebase --interactive very useful. Branches should be deleted once a pull request has been merged (this option is automatically offered to the user once they have performed that merge, if using the GitHub interface). You are also encouraged to avoid merge commits and use git rebase main instead. However, you should not rewrite commits that have been pushed unless you: are very sure that no-one else will be affected by you rewriting the branch history have an extremely good reason. For example: someone has committed sensitive information (personally identifiable data, passwords and suchlike) and it needs purging from history When in doubt you should err towards smaller commits, which can be rebased together later. It's harder to break large commits out into smaller chunks. The smaller commits should still be logical chunks, but this will give context for a more specific change and make git tools like annotate and log more useful. When merging from a feature branch to main (or any other mainline development branch), in particular one that has previously been shared with colleagues, you should use git merge 's --no-ff option to preserve evidence of your feature branch in the repository history. This advice may be freely ignored for smaller local feature branches for which a fast-forward merge will look like any other routine development work on main . Do not use git push -f , use --force-with-lease instead Force pushing in git is a subject that attracts all kinds of religious battles. This advice is not about the merits of force pushing. This is about how to use git push -f if and when you do use it. Let's say you're working on a branch, 'foobar', and you decide to force push to the remote. So you do this: $ git push -f If anyone else has committed anything to your branch since you last pulled, you will blow their changes away. So for a bit of safety, if you ever need to force push please instead do: $ git push --force-with-lease --force-with-lease refuses to update a branch unless it is the state that we expect, which is that nobody has updated the remote branch.","title":"Version control and deployments"},{"location":"versioncontroldeployments/#version-control-and-deployments","text":"At DDS, we follow the principles set out in the Service Manual for managing the code we write by: using version control making source code open","title":"Version control and deployments"},{"location":"versioncontroldeployments/#publish-open-source-code","text":"Wherever possible, we make our source code open and reusable. This means the rest of Defence, other government departments, and people in outside organisations can benefit from our work. It\u2019s not always appropriate to code in the open. There are sometimes grounds for keeping some data and code closed , for example: keys and credentials algorithms and logic that exposes sensitive military workings code or data that makes clear details of unannounced policy The Service Manual explains how to open previously closed code and your responsibilities for maintaining open code . When you publish open source code, your project must: include a README have useful and informative commit messages about why a change was made provide a changelog include an MIT and OGL licence file link to a public list of known issues and bugs have an email address to submit security related bug reports list a version number compatible with Semantic Versioning Your open source code project should: publish packages to relevant language specific repositories such as PyPI - the Python Package Index post contributors' guidelines in a contributing file, like the Go repository set up any tests to run in a continuous integration environment (we currently use GitHub Actions) You could also provide a mailing list so people can discuss your project.","title":"Publish open source code"},{"location":"versioncontroldeployments/#use-github","text":"DDS uses GitHub as its code repository. Put new repositories for DDS services in the defencedigital organisation on GitHub. You can use your personal GitHub account to access defencedigital . Ask your tech lead or technical architect to invite you. DDS will revoke your access to defencedigital when you leave DDS. To secure your Github repository, make sure you: configure two-factor authentication for your account (enforced at an organisation level) have considered encrypting your repository contents consider protecting your main branch to prevent changes being committed without a suitable review You can also consider backing up your Git repositories to another location (this should be a team responsibility). If you are using AWS to host your service AWS CodeCommit is one option.","title":"Use GitHub"},{"location":"versioncontroldeployments/#naming-repositories","text":"Naming conventions for repositories make it easier for people to find relevant ones and to understand how they interrelate. With that in mind: all repositories should have a clear and logical name, so that people can see more or less what it does by simply reading the name where there would otherwise be a space in the name, you should replace this with a hypeh ( - ), not a dot or any other punctuation project-specific repos should have a logical and identifiable prefix prepended to their name. For example, Project R2-D2 has repos like r2-d2-infra and r2-d2-docs repos that aren't project-specific do not need anything prepended to them","title":"Naming repositories"},{"location":"versioncontroldeployments/#how-to-retire-applications","text":"If an application is no longer used in production, you should archive its repository . Update the application's README to explain why the repository has been archived, and link to a new location if the application has been superseded.","title":"How to retire applications"},{"location":"versioncontroldeployments/#working-with-git","text":"","title":"Working with Git"},{"location":"versioncontroldeployments/#commit-messages","text":"Writing good commit messages is important. Not just for yourself, but for other developers on your project. This includes: new (or recently absent) developers who want to get up to speed on progress interested external parties who want to follow progress of the project people in the public (remember, we code in the open) who want to see our work, or learn from our practices any future developers (including yourself) who want to see why a change was made Capturing context around a change allows people to understand why a particular implementation decision was made, much like an architecture decision record . We're being kinder to our future selves.","title":"Commit messages"},{"location":"versioncontroldeployments/#recommended-blog-posts-on-this-topic","text":"How to Write a Git Commit Message 5 useful tips for a better commit message Every line of code is always documented","title":"Recommended blog posts on this topic"},{"location":"versioncontroldeployments/#content","text":"A good commit message briefly summarises the \"what\" for scanning purposes, but also includes the \"why\". If the \"what\" in the message is not enough, the diff is there as a fallback. This is not true for the \"why\" of a change - this can be much harder or impossible to reconstruct, but is often of great significance.","title":"Content"},{"location":"versioncontroldeployments/#example","text":"Set cache headers prefer: Set cache headers IE 6 was doing foo, so we need to do bar. See http://example.com/why-is-this-broken for more details.","title":"Example"},{"location":"versioncontroldeployments/#links-to-issue-trackers","text":"A link to a ticket in an issue tracker should not be seen as an alternative to writing a commit message. While a link can add some extra context for people reviewing a pull request, the commit message should stand on its own. There's no guarantee that the link will continue to work in the future when someone is looking through the commit history to understand why a change was made. If you are adding a link to a publicly viewable repository, ensure that the linked ticket is publicly viewable (and likely to remain so).","title":"Links to issue trackers"},{"location":"versioncontroldeployments/#structure","text":"Commit messages should start with a one-line summary no longer than 50 characters. Various Git tools (including GitHub) use this as the commit summary, so you should format it like an email subject, with a leading capital and no full stop. The Git convention is to write these in the present tense. For example: Leverage best-of-breed synergies going forward You should leave a blank line before the rest of the commit message, which you should wrap at around 72 characters: this makes it easier to view commit messages in a terminal.","title":"Structure"},{"location":"versioncontroldeployments/#example_1","text":"Taken from Tim Pope\u2019s guidelines . Capitalized, short (50 chars or less) summary More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of an email and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); tools like rebase can get confused if you run the two together. Write your commit message in the present tense: \"Fix bug\" and not \"Fixed bug.\" This convention matches up with commit messages generated by commands like git merge and git revert. Further paragraphs come after blank lines. Bullet points are okay, too Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here Use a hanging indent","title":"Example"},{"location":"versioncontroldeployments/#branchingmerging-conventions","text":"You may often choose to work on a particular feature on a \"feature branch\" rather than directly on main . Indeed, given how cheap branches are in Git, using branches is positively encouraged. You are encouraged to make liberal use of Git's history rewriting features while working locally, in order to arrange your commits into appropriate logical chunks that will make sense to your fellow developers. In particular, you may find git rebase --interactive very useful. Branches should be deleted once a pull request has been merged (this option is automatically offered to the user once they have performed that merge, if using the GitHub interface). You are also encouraged to avoid merge commits and use git rebase main instead. However, you should not rewrite commits that have been pushed unless you: are very sure that no-one else will be affected by you rewriting the branch history have an extremely good reason. For example: someone has committed sensitive information (personally identifiable data, passwords and suchlike) and it needs purging from history When in doubt you should err towards smaller commits, which can be rebased together later. It's harder to break large commits out into smaller chunks. The smaller commits should still be logical chunks, but this will give context for a more specific change and make git tools like annotate and log more useful. When merging from a feature branch to main (or any other mainline development branch), in particular one that has previously been shared with colleagues, you should use git merge 's --no-ff option to preserve evidence of your feature branch in the repository history. This advice may be freely ignored for smaller local feature branches for which a fast-forward merge will look like any other routine development work on main .","title":"Branching/merging conventions"},{"location":"versioncontroldeployments/#do-not-use-git-push-f-use-force-with-lease-instead","text":"Force pushing in git is a subject that attracts all kinds of religious battles. This advice is not about the merits of force pushing. This is about how to use git push -f if and when you do use it. Let's say you're working on a branch, 'foobar', and you decide to force push to the remote. So you do this: $ git push -f If anyone else has committed anything to your branch since you last pulled, you will blow their changes away. So for a bit of safety, if you ever need to force push please instead do: $ git push --force-with-lease --force-with-lease refuses to update a branch unless it is the state that we expect, which is that nobody has updated the remote branch.","title":"Do not use git push -f, use --force-with-lease instead"}]}